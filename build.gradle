buildscript {
    repositories {
        maven {
            url "https://plugins.gradle.org/m2/"
        }
        mavenCentral()
        jcenter()

    }
    dependencies {
        classpath('org.springframework.boot:spring-boot-gradle-plugin:2.2.1.RELEASE')
        classpath('gradle.plugin.com.palantir.gradle.docker:gradle-docker:0.13.0')
        classpath('com.diffplug.spotless:spotless-plugin-gradle:3.13.0')
        classpath('org.jfrog.buildinfo:build-info-extractor-gradle:4.9.6')
    }
}

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'com.palantir.docker'
apply plugin: 'jacoco'
apply plugin: 'com.diffplug.gradle.spotless'

ext {
    set('springCloudVersion', "Hoxton.RELEASE")
}

dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
    }
}

// This is used as the docker image prefix (org)
group = 'com.biomerieux.ussd'

springBoot{
    buildInfo()
}

// tag::task[]
task unpack(type: Copy) {
    dependsOn bootJar
    from(zipTree(tasks.bootJar.outputs.files.singleFile))
    into("build/dependency")
}
docker {
    name "${project.group}/${bootJar.baseName}"
    copySpec.from(tasks.unpack.outputs).into("dependency")
    buildArgs(['DEPENDENCY': "dependency"])
}
// end::task[]


repositories {
    mavenCentral()
     flatDir {
        dirs 'lib'
    }
}

sourceCompatibility = 11
targetCompatibility = 11

dependencies {
    compile 'org.springframework.boot:spring-boot-starter-actuator'
    compile 'org.springframework.boot:spring-boot-starter-web'
    compile 'org.springframework.boot:spring-boot-starter-data-jdbc'
    compile 'org.springframework.boot:spring-boot-starter-data-jpa'
    compile 'org.springframework.cloud:spring-cloud-starter-sleuth'
    compile 'org.springframework.cloud:spring-cloud-starter-config'
    compile 'net.logstash.logback:logstash-logback-encoder:6.3'
    compile 'com.github.skjolber.logback-logstash-syntax-highlighting-decorators:logback-logstash-syntax-highlighting-decorators:1.0.3'
    compile 'com.oracle:ojdbc7:12.1.0.1'
    compile 'org.apache.commons:commons-lang3:3.9'
    compile 'com.google.code.gson:gson:2.7'
    compile 'org.springframework.cloud:spring-cloud-aws-messaging:2.1.3.RELEASE'
    testCompile 'org.springframework.boot:spring-boot-starter-test'
    testRuntime 'com.h2database:h2:1.4.200'
    testRuntime 'org.mockito:mockito-inline:2.13.0'
}

spotless {
    enforceCheck = true
    java {
        target '**/*.java'
        removeUnusedImports();
        eclipse().configFile 'eclipse-format.xml'
    }
}

jacocoTestReport {
    reports {
        xml {
            enabled true // coveralls plugin depends on xml format report
        }

        html {
            enabled true
        }
    }

    afterEvaluate {
        classDirectories = files(classDirectories.files.collect {
            fileTree(dir: it,
                    exclude: ['**/model**',
                              '**/config**',
                              '**/dto**'])
        })
    }
}
